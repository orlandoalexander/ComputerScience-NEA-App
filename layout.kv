#: import NoTransition kivy.uix.screenmanager.NoTransition
WindowManager: #initiates and orders all screens/classes
    Launch:
    SignUp:
    SignIn:
    Homepage:
    MessageResponses_add:
    MessageResponses_create:
    MessageResponses_createAudio:
    MessageResponses_viewAudio:
    MessageResponses_createText:
    RingAlert:
    VisitorImage:
    VisitorLog:



<MDTextField>
#creates default settings for MDTextField objects
    mode: "line" #default mode for text field is a rectangle
    size_hint_x: 0.5 #default width of text field is half the width of the screen
    color_mode: "custom"
    use_bubble: False
    line_color_focus: 1,1,1,1 #rgba color of rectangle outline when the user begins to input text into the text field (white)
    line_color_normal: 128/255,128/255,128/255,1

<Button>
#creates default settings for buttons
    background_color: 1,1,1,0 #sets all buttons default background colour to transparent


<SignUp>:
    name: "SignUp" #defines the screen name used to switch between the screens

    FloatLayout: #class used in Kivy to organise objects in the GUI without any constraints

        Image:
            id: signUp #unique identifier for this specific image
            source: "SmartBell_signUp.png"
            size: self.size #sets image to same size as screen
            allow_stretch: True #allows image to be stretched so that it fills the screen
            keep_ratio: False #allows image proportions to be altered so that it fills the screen

        MDTextField:
            id: firstName #unique identifier for this specific textfield
            hint_text: "First Name" #hint text indicates what data the user should input into this text field
            pos_hint: {"center_x": 0.5, "center_y": 0.67} #position of text field relative to screen
        MDLabel:
            id: firstName_error #unique identifier for this specific label
            text: "First Name is required   " #notifies user that input is required if they have not inputted any data
            theme_text_color: "Custom"
            font_style: "Caption" #font style for error message
            text_color: 1,0,0,1 #red in rgba color values, which is appropriate for an error message
            halign: "left" #horizontally align the text on the left of the label so that the start of the text can easily be aligned with the edge of the corresponding text field
            pos_hint: {"center_x": 0.75, "center_y": 0.64} #position of label relative to screen
            opacity: 0 #by default the opacity value is 0 so that the label and error message cannot be seen, but when an error is made by the user the opacity value is changed to 1

        MDTextField:
            id: surname #unique identifier for this specific textfield
            hint_text: "Surname" #hint text indicates what data the user should input into this text field
            pos_hint: {"center_x": 0.5, "center_y": 0.57} #position of text field relative to screen
        MDLabel:
            id: surname_error #unique identifier for this specific label
            text: "Surname is required" #notifies user that input is required if they have not inputted any data
            theme_text_color: "Custom"
            font_style: "Caption" #font style for error message
            text_color: 1,0,0,1 #red in rgba color values, which is appropriate for an error message
            halign: "left" #horizontally align the text on the left of the label so that the start of the text can easily be aligned with the edge of the corresponding text field
            pos_hint: {"center_x": 0.75, "center_y": 0.54} #position of label relative to screen
            opacity: 0 #by default the opacity value is 0 so that the label and error message cannot be seen, but when an error is made by the user the opacity value is changed to 1

        MDTextField:
            id: email #unique identifier for this specific textfield
            hint_text: "Email" #hint text indicates what data the user should input into this text field
            pos_hint: {"center_x": 0.5, "center_y": 0.47} #position of text field relative to screen
        MDLabel:
            id: email_error_blank #unique identifier for this specific label
            text: "Email is required" #notifies user that input is required if they have not inputted any data
            theme_text_color: "Custom"
            font_style: "Caption" #font style for error message
            text_color: 1,0,0,1 #red in rgba color values, which is appropriate for an error message
            halign: "left" #horizontally align the text on the left of the label so that the start of the text can easily be aligned with the edge of the corresponding text field
            pos_hint: {"center_x": 0.75, "center_y": 0.44} #position of label relative to screen
            opacity: 0 #by default the opacity value is 0 so that the label and error message cannot be seen, but when an error is made by the user the opacity value is changed to 1
        MDLabel:
            id: email_error_invalid #unique identifier for this specific label
            text: "Email format is invalid" #notifies user that inputted email format is invalid
            theme_text_color: "Custom"
            font_style: "Caption" #font style for error message
            text_color: 1,0,0,1 #red in rgba color values, which is appropriate for an error message
            halign: "left" #horizontally align the text on the left of the label so that the start of the text can easily be aligned with the edge of the corresponding text field
            pos_hint: {"center_x": 0.75, "center_y": 0.44} #position of label relative to screen
            opacity: 0 #by default the opacity value is 0 so that the label and error message cannot be seen, but when an error is made by the user the opacity value is changed to 1

        MDTextField:
            id: password #unique identifier for this specific textfield
            hint_text: "Password" #hint text indicates what data the user should input into this text field
            pos_hint: {"center_x": 0.5, "center_y": 0.37} #position of text field relative to screen
            password: True #inputted text is replaced by bullet points to conceal the password as it is sensitive information
            icon_right: "eye-off" #by default, the inputted text is replaced by bullet points so the eye icon status default to 'eye-off'

        MDLabel:
            id: password_error_blank #unique identifier for this specific label
            text: "Password is required" #notifies user that input is required if they have not inputted any data
            theme_text_color: "Custom"
            font_style: "Caption" #font style for error message
            text_color: 1,0,0,1 #red in rgba color values, which is appropriate for an error message
            halign: "left" #horizontally align the text on the left of the label so that the start of the text can easily be aligned with the edge of the corresponding text field
            pos_hint: {"center_x": 0.75, "center_y": 0.34} #position of label relative to screen
            opacity: 0 #by default the opacity value is 0 so that the label and error message cannot be seen, but when an error is made by the user the opacity value is changed to 1
        MDLabel:
            id: password_error_invalid #unique identifier for this specific label
            text: "Password must be at least 8 characters and contain at least 1 lowercase character, 1 uppercase character, 1 digit and 1 special character"  #notifies user that input is required if they have not inputted any data
            theme_text_color: "Custom"
            font_style: "Caption" #font style for error message
            text_color: 1,0,0,1 #red in rgba color values, which is appropriate for an error message
            halign: "left" #horizontally align the text on the left of the label so that the start of the text can easily be aligned with the edge of the corresponding text field
            pos_hint: {"center_x": 0.53, "center_y": 0.3} #position of label relative to screen
            size_hint_x: 0.56 #ensures the text in the label does not run beyond the corresponding text field
            opacity: 0 #by default the opacity value is 0 so that the label and error message cannot be seen, but when an error is made by the user the opacity value is changed to 1

        Label:
            id: snackbar
            canvas.before:
                Color:
                    rgba: (136/255,122/255,239/255,1)
                Rectangle:
                    pos: self.pos
                    size: self.size
            text_color: (1,1,1,1)
            valign: "middle"
            halign: 'center'
            size_hint: 1, 0.1
            pos_hint: {"center_x": 0.5, "top":0}


        Button:
            id: passwordIcon_button #unique identifier for this specific button
            size_hint: 0.09, 0.04
            pos_hint: {"center_x": 0.7, "center_y": 0.375}
            on_press:
                password.icon_right = "eye" if password.icon_right == "eye-off" else "eye-off" #if the icon was previously "eye-off", then it is changed to "eye". If the icon was previously "eye", then it is changed to "eye-off"
                password.password = False if password.password is True else True #the property 'password' of the text field 'password' is inverted when the icon is tapped by the user

        Button:
            id: signUp_button #unique identifier for this specific button
            size_hint: 0.5, 0.11 #size of button relative to screen
            pos_hint: {"center_x": 0.7, "center_y": 0.19} #position of button relative to screen
            on_press: root.createAccount() #calls Python method 'createAccount'

        Button:
            id: signIn_button #unique identifier for this specific button
            size_hint: 0.2, 0.05 #size of button relative to screen
            pos_hint: {"center_x": 0.67, "center_y": 0.04} #position of button relative to screen
            on_press: root.manager.current = "SignIn"  # switches to 'SignIn' screen


<SignIn>:

    name: "SignIn" #defines the screen name used to switch between the screens

    FloatLayout: #class used in Kivy to organise objects in the GUI without any constraints

        Image:
            id: signIn #unique identifier for this specific image
            source: "SmartBell_signIn.png"
            size: self.size #sets image to same size as screen
            allow_stretch: True #allows image to be stretched so that it fills the screen
            keep_ratio: False #allows image proportions to be altered so that it fills the screen

        MDTextField:
            id: email #unique identifier for this specific textfield
            hint_text: "Email" #hint text indicates what data the user should input into this text field
            pos_hint: {"center_x": 0.5, "center_y": 0.47} #position of text field relative to screen
        MDLabel:
            id: email_error_blank #unique identifier for this specific label
            text: "Email is required" #notifies user that input is required if they have not inputted any data
            theme_text_color: "Custom"
            font_style: "Caption" #font style for error message
            text_color: 1,0,0,1 #red in rgba color values, which is appropriate for an error message
            halign: "left" #horizontally align the text on the left of the label so that the start of the text can easily be aligned with the edge of the corresponding text field
            pos_hint: {"center_x": 0.75, "center_y": 0.44} #position of label relative to screen
            opacity: 0 #by default the opacity value is 0 so that the label and error message cannot be seen, but when an error is made by the user the opacity value is changed to 1
        MDLabel:
            id: email_error_invalid #unique identifier for this specific label
            text: "Email format is invalid" #notifies user that inputted email format is invalid
            theme_text_color: "Custom"
            font_style: "Caption" #font style for error message
            text_color: 1,0,0,1 #red in rgba color values, which is appropriate for an error message
            halign: "left" #horizontally align the text on the left of the label so that the start of the text can easily be aligned with the edge of the corresponding text field
            pos_hint: {"center_x": 0.75, "center_y": 0.44} #position of label relative to screen
            opacity: 0 #by default the opacity value is 0 so that the label and error message cannot be seen, but when an error is made by the user the opacity value is changed to 1

        MDTextField:
            id: password #unique identifier for this specific textfield
            hint_text: "Password" #hint text indicates what data the user should input into this text field
            pos_hint: {"center_x": 0.5, "center_y": 0.37} #position of text field relative to screen
            password: True #inputted text is replaced by a bullet point icon to conceal the password as it is sensitive information
            icon_right: "eye-off"
        MDLabel:
            id: password_error_blank #unique identifier for this specific label
            text: "Password is required" #notifies user that input is required if they have not inputted any data
            theme_text_color: "Custom"
            font_style: "Caption" #font style for error message
            text_color: 1,0,0,1 #red in rgba color values, which is appropriate for an error message
            halign: "left" #horizontally align the text on the left of the label so that the start of the text can easily be aligned with the edge of the corresponding text field
            pos_hint: {"center_x": 0.75, "center_y": 0.34} #position of label relative to screen
            opacity: 0 #by default the opacity value is 0 so that the label and error message cannot be seen, but when an error is made by the user the opacity value is changed to 1
        MDLabel:
            id: password_error_invalid #unique identifier for this specific label
            text: "Password must be at least 8 characters and contain at least 1 lowercase character, 1 uppercase character, 1 digit and 1 special character"  #notifies user that input is required if they have not inputted any data
            theme_text_color: "Custom"
            font_style: "Caption" #font style for error message
            text_color: 1,0,0,1 #red in rgba color values, which is appropriate for an error message
            halign: "left" #horizontally align the text on the left of the label so that the start of the text can easily be aligned with the edge of the corresponding text field
            pos_hint: {"center_x": 0.53, "center_y": 0.3} #position of label relative to screen
            size_hint_x: 0.56 #ensures the text in the label does not run beyond the corresponding text field
            opacity: 0 #by default the opacity value is 0 so that the label and error message cannot be seen, but when an error is made by the user the opacity value is changed to 1

        Label:
            id: snackbar
            canvas.before:
                Color:
                    rgba: (136/255,122/255,239/255,1)
                Rectangle:
                    pos: self.pos
                    size: self.size
            text: "Incorrect username or password"
            text_color: (1,1,1,1)
            font_size: 36
            valign: "middle"
            halign: 'center'
            size_hint: 1, 0.1
            pos_hint: {"center_x": 0.5, "top":0}

        Button:
            id: passwordIcon_button #unique identifier for this specific button
            size_hint: 0.09, 0.04
            pos_hint: {"center_x": 0.7, "center_y": 0.375}
            on_press:
                password.icon_right = "eye" if password.icon_right == "eye-off" else "eye-off" #if the icon was previously "eye-off", then it is changed to "eye". If the icon was previously "eye", then it is changed to "eye-off"
                password.password = False if password.password is True else True #the property 'password' of the text field 'password' is inverted when the icon is tapped by the user

        Button:
            id: signIn_button #unique identifier for this specific button
            size_hint: 0.5, 0.11 #size of button relative to screen
            pos_hint: {"center_x": 0.7, "center_y": 0.19} #position of button relative to screen
            on_press: root.signIn() #calls Python method 'signIn'

        Button:
            id: signUp_button #unique identifier for this specific button
            size_hint: 0.2, 0.05 #size of button relative to screen
            pos_hint: {"center_x": 0.67, "center_y": 0.04} #position of button relative to screen
            on_press: root.manager.current = "SignUp" # switches to 'SignUp' screen

<Homepage>:

    name: "Homepage"

    FloatLayout:

        Image:
            id: Homepage #unique identifier for this specific image
            source: "SmartBell_homepage.png"
            size: self.size #sets image to same size as screen
            allow_stretch: True #allows image to be stretched so that it fills the screen
            keep_ratio: False #allows image proportions to be altered so that it fills the screen


        Button:
            id: button_addMessage
            size_hint: 0.23,0.12
            pos_hint: {"x": 0.62, "y": 0.52}
            on_press:
                root.manager.current = "MessageResponses_add"
                root.manager.current_screen.__init__()

        Button:
            id: button_latestImage
            size_hint: 0.23,0.12
            pos_hint: {"x": 0.15, "y": 0.52}
            on_press:
                root.manager.current = "VisitorImage"
                root.manager.current_screen.viewImage()

        Button:
            id: button_visitorLog
            size_hint: 0.23,0.12
            pos_hint: {"x": 0.15, "y": 0.25}
            on_press:
                root.manager.current = "VisitorLog"

        Button:
            id: button_pair
            size_hint: 0.23,0.12
            pos_hint: {"x": 0.62, "y": 0.25}
            on_press:
                root.manager.current_screen.pairSelect()

        Button:
            id: button_account #unique identifier for this specific button
            pos_hint: {"center_x": 0.85, "center_y": 0.07}
            size_hint: 0.2,0.1
            on_press: root.account() #calls Python method 'account'

        Label:
            id: snackbar #unique identifier for this specific label
            canvas.before:
            #draws GUI - the 'before' aspect of the instruction ensures that these graphics are the first aspect of the label to be created and so are behind the text of the label
                Color:
                    rgba: (136/255,122/255,239/255,1)
                Rectangle:
                    pos: self.pos
                    size: self.size
            text_color: (1,1,1,1)
            valign: "middle" #align the text vertically in the middle of the label
            halign: "center" #align the text horizontally in the centre of the label
            size_hint: 1, 0.13
            pos_hint: {"center_x": 0.5, "top":0}



<MessageResponses_add>:

    name: "MessageResponses_add" #defines the screen name used to switch between the screens
    continueIcon: continueIcon #maps Python variable onto kivy ID

    FloatLayout:

        Image:
            id: addMessages #unique identifier for this specific image
            source: "SmartBell_addMessages.png"
            size: self.size #sets image to same size as screen
            allow_stretch: True #allows image to be stretched so that it fills the screen
            keep_ratio: False #allows image proportions to be altered so that it fills the screen

        Image:
            id: previewMessages #unique identifier for this specific image
            source: "SmartBell_previewMessages.png"
            size: self.size #sets image to same size as screen
            allow_stretch: True #allows image to be stretched so that it fills the screen
            keep_ratio: False #allows image proportions to be altered so that it fills the screen
            opacity: 0


        Button:
            id: button_continueIcon #unique identifier for this specific button
            disabled: True #button is disabled so cannot be tapped
            size_hint: 0.23,0.1
            pos_hint: {"x":0.44,"y": 0.13}
            on_press: root.manager.current = "MessageResponses_create" # switches to 'MessageResponses_create' screen

        Button:
            id: button_homepage #unique identifier for this specific button
            pos_hint: {"center_x": 0.52, "center_y": 0.07}
            size_hint: 0.2,0.1
            on_press:
                if root.previewMessages == False: root.manager.current = "Homepage"
                elif root.previewMessages == True: root.cancelRespond_dialog()

        Button:
            id: button_forward #unique identifier for this specific button
            pos_hint: {"center_x": 0.85, "center_y": 0.07}
            size_hint: 0.2,0.1
            on_press: root.audioMessage_create(1, 3) # calls parent method 'audioMessage_create' with the arguments (1,3) to indicate that the forward button has been pressed

        Button:
            id: button_backward #unique identifier for this specific button
            pos_hint: {"center_x": 0.15, "center_y": 0.07}
            size_hint: 0.2,0.1
            on_press: root.audioMessage_create(-1,-3) # calls parent method 'audioMessage_create' with the arguments (-1,-3) to indicate that the backwards button has been pressed

        Button:
            id: button_audioMessage_1
            size_hint: 0.23,0.12
            pos_hint: {"x": 0.14, "y": 0.52}
            disabled: True
            on_press:
                if root.previewMessages == True and audioMessage_name1.text != "": root.respondAudio_preview(1)
                elif root.previewMessages == True and audioMessage_name1.text == "":  root.respondAudio_new()
                elif root.previewMessages == False and audioMessage_name1.text != "": root.openMessage(1)
                elif root.previewMessages == False and audioMessage_name1.text == "":  root.openTarget() #opens the target view

        Button:
            id: button_audioMessage_2
            size_hint: 0.23,0.12
            pos_hint: {"x": 0.62, "y": 0.52}
            disabled: True
            on_press:
                if root.previewMessages == True and audioMessage_name2.text != "": root.respondAudio_preview(2)
                elif root.previewMessages == True and audioMessage_name2.text == "":  root.respondAudio_new()
                elif root.previewMessages == False and audioMessage_name2.text != "": root.openMessage(2)
                elif root.previewMessages == False and audioMessage_name2.text == "":  root.manager.current = "MessageResponses_create"

        Button:
            id: button_audioMessage_3
            size_hint: 0.23,0.12
            pos_hint: {"x": 0.14, "y": 0.26}
            disabled: True
            on_press:
                if root.previewMessages == True and audioMessage_name3.text != "": root.respondAudio_preview(3)
                elif root.previewMessages == True and audioMessage_name3.text == "":  root.respondAudio_new()
                elif root.previewMessages == False and audioMessage_name3.text != "": root.openMessage(3)
                elif root.previewMessages == False and audioMessage_name3.text == "":  root.manager.current = "MessageResponses_create"


        Button:
            id: button_plusIcon #unique identifier for this specific button
            size_hint: 0.23,0.12
            pos_hint: {"x": 0.64, "y": 0.26}
            disabled: True #button is disabled so cannot be tapped
            on_press:
                if root.previewMessages == False: root.manager.current = "MessageResponses_create" # switches to 'MessageResponses_create' screen
                if root.previewMessages == True: root.respondAudio_new()

        Image:
            id: plusIcon #unique identifier for this specific image
            source: "plusIcon.png"
            size_hint: 0.17,0.17
            opacity: 0

        Image:
            id: continueIcon #unique identifier for this specific image
            source: "continueIcon.png"
            size_hint: 0.19,0.19
            pos_hint: {"x":0.44,"y": 0.13}
            opacity: 0


        Label:
            id: audioMessage_name1 #unique identifier for this specific label
            size_hint: 0.2,0.1
            pos_hint: {"x": 0.15, "y": 0.542}
            halign: "center" #align the text horizontally in the centre of the label
            font_size: 36
            bold: True

        Label:
            id: audioMessage_name2 #unique identifier for this specific label
            size_hint: 0.2,0.1
            pos_hint: {"x": 0.63, "y": 0.542}
            halign: "center" #align the text horizontally in the centre of the label
            font_size: 36
            bold: True

        Label:
            id: audioMessage_name3 #unique identifier for this specific label
            size_hint: 0.2,0.1
            pos_hint: {"x": 0.15, "y": 0.27}
            halign: "center" #align the text horizontally in the centre of the label
            font_size: 36
            bold: True



<MessageResponses_create>:

    name: "MessageResponses_create" #defines the screen name used to switch between the screens

    FloatLayout:

        Image:
            id: createMessages #unique identifier for this specific image
            source: "SmartBell_createMessages.png"
            size: self.size #sets image to same size as screen
            allow_stretch: True #allows image to be stretched so that it fills the screen
            keep_ratio: False #allows image proportions to be altered so that it fills the screen

        Button:
            id: button_recordMessage #unique identifier for this specific button
            pos_hint: {"center_x": 0.54, "center_y": 0.535}
            size_hint: 0.43,0.09
            on_press:
                root.manager.current = "MessageResponses_createAudio"
                root.manager.current_screen.__init__()

        Button:
            id: button_recordMessage #unique identifier for this specific button
            pos_hint: {"center_x": 0.54, "center_y": 0.22}
            size_hint: 0.43,0.09
            on_press:
                root.manager.current = "MessageResponses_createText"
                root.manager.current_screen.__init__()

        Button:
            id: button_homepage #unique identifier for this specific button
            pos_hint: {"center_x": 0.52, "center_y": 0.07}
            size_hint: 0.2,0.1
            on_press: root.manager.current = "Homepage"

        Button:
            id: button_backward #unique identifier for this specific button
            pos_hint: {"center_x": 0.15, "center_y": 0.07}
            size_hint: 0.2,0.1
            on_press:
                root.manager.current = root.manager.previous()
                root.manager.current_screen.__init__()



<MessageResponses_createAudio>:

    name: "MessageResponses_createAudio" #defines the screen name used to switch between the screens

    FloatLayout:

        Image:
            id: createMessages_audio #unique identifier for this specific image
            source: "SmartBell_createMessages_audio.png"
            size: self.size #sets image to same size as screen
            allow_stretch: True #allows image to be stretched so that it fills the screen
            keep_ratio: False #allows image proportions to be altered so that it fills the screen

        Image:
            id: recordAudio #unique identifier for this specific image
            source: "SmartBell_audioRecord_static.png"
            anim_delay: 0 #sets the delay between each image in the zip file to 0 so that the gif is played smoothly
            anim_loop: 1 #sets the limit for the number of loops of the gif to 1
            allow_stretch: True
            keep_ratio: True
            size_hint: 2,2
            pos_hint: {"center_x":0.5, "center_y": 0.6}

        Button:
            id: button_recordAudio #unique identifier for this specific image
            size_hint: 0.3,0.25
            pos_hint: {"center_x": 0.5, "center_y": 0.58}
            on_press:
                root.startRecording() #calls the method 'startRecording' from the parent class in the Python application
            on_release:
                recordAudio.source = root.recordAudio_end #changes the image source for the ID 'recordAudio'
                root.stopRecording() #calls the method 'stopRecording' from the parent class in the Python application


        Button:
            id: button_helpAudio #unique identifier for this specific image
            size_hint: 0.45,0.1
            pos_hint: {"center_x": 0.74, "center_y": 0.25}
            on_press:
                root.helpAudio() #calls the method to open a dialog box which allows the user to input the name of the audio message which they recorded

        Button:
            id: button_cancelAudio #unique identifier for this specific image
            size_hint: 0.45,0.1
            pos_hint: {"center_x": 0.25, "center_y": 0.25}
            on_press:
                root.manager.current = "MessageResponses_add" # switches to 'MessageResponses_add' screen
                root.manager.current_screen.__init__()

        Button:
            id: button_homepage #unique identifier for this specific button
            pos_hint: {"center_x": 0.52, "center_y": 0.07}
            size_hint: 0.2,0.1
            on_press: root.manager.current = "Homepage"

        Button:
            id: button_backward #unique identifier for this specific button
            pos_hint: {"center_x": 0.15, "center_y": 0.07}
            size_hint: 0.2,0.1
            on_press:
                root.manager.current = root.manager.previous()
                root.manager.current_screen.__init__()

        Label:
            id: snackbar #unique identifier for this specific label
            canvas.before:
            #draws GUI - the 'before' aspect of the instruction ensures that these graphics are the first aspect of the label to be created and so are behind the text of the label
                Color:
                    rgba: (136/255,122/255,239/255,1)
                Rectangle:
                    pos: self.pos
                    size: self.size
            text_color: (1,1,1,1)
            valign: "middle" #align the text vertically in the middle of the label
            halign: "center" #align the text horizontally in the centre of the label
            size_hint: 1, 0.13
            pos_hint: {"center_x": 0.5, "top":0}


<MessageResponses_viewAudio>:

    name: "MessageResponses_viewAudio"

    FloatLayout:

        Image:
            id: MessageResponses_viewAudio #unique identifier for this specific image
            source: "SmartBell_playbackMessages_audio.png"
            size: self.size #sets image to same size as screen
            allow_stretch: True #allows image to be stretched so that it fills the screen
            keep_ratio: False #allows image proportions to be altered so that it fills the screen

        Image:
            id: playbackAudio #unique identifier for this specific image
            source: "SmartBell_playbackAudio.png"
            anim_delay: 0 #sets the delay between each image in the zip file to 0 so that the gif is played smoothly
            anim_loop: 0 #sets an infinite loop limit for the gif
            pos_hint: {"center_x":0.5, "center_y": 0.6}

        Button:
            id: button_playbackAudio #unique identifier for this specific image
            size_hint: 0.45,0.1
            pos_hint: {"center_x": 0.74, "center_y": 0.25}
            on_press:
                root.audioMessage_play() #calls the method 'audioMessage_play' from the parent class in the Python application

        Button:
            id: button_rerecordAudio #unique identifier for this specific image
            size_hint: 0.45,0.1
            pos_hint: {"center_x": 0.25, "center_y": 0.25}
            on_press:
                root.manager.current = "MessageResponses_createAudio" # switches to 'MessageResponses_createAudio' screen
                root.manager.current_screen.__init__()
                if root.initialRecording == False: root.manager.current_screen.rerecordAudio(root.messageDetails)

        Button:
            id: button_saveAudio #unique identifier for this specific image
            size_hint: 0.45,0.1
            pos_hint: {"center_x": 0.5, "center_y": 0.375}
            on_press:
                root.nameMessage_dialog()  #calls the method 'nameMessage_dialog' from the parent class in the Python application

        Button:
            id: button_backward #unique identifier for this specific button
            pos_hint: {"center_x": 0.15, "center_y": 0.07}
            size_hint: 0.2,0.1
            on_press:
                root.tmpAudio_delete()
                if root.initialRecording == False: root.manager.current = "MessageResponses_add"
                elif root.initialRecording == True: root.manager.current = root.manager.previous()
                root.manager.current_screen.__init__()

        Button:
            id: button_homepage #unique identifier for this specific button
            pos_hint: {"center_x": 0.52, "center_y": 0.07}
            size_hint: 0.2,0.1
            on_press:
                root.tmpAudio_delete()
                root.manager.current = "Homepage"

        Button:
            id: button_deleteMessage #unique identifier for this specific button
            pos_hint: {"center_x": 0.85, "center_y": 0.07}
            size_hint: 0.2,0.1
            on_press:
                root.deleteMessage() #calls the method 'deleteMessage' from the parent class in the Python application
                root.manager.current = "MessageResponses_add"
                root.manager.current_screen.__init__()



<MessageResponses_createText>:

    name: "MessageResponses_createText"

    FloatLayout:

        Image:
            id: createMessages_text #unique identifier for this specific image
            source: "SmartBell_createMessages_text.png"
            size: self.size #sets image to same size as screen
            allow_stretch: True #allows image to be stretched so that it fills the screen
            keep_ratio: False #allows image proportions to be altered so that it fills the screen

        MDTextField:
            id: messageText #unique identifier for this specific textfield
            hint_text: "Enter text for audio message" #hint text indicates what data the user should input into this text field
            size_hint_x: 0.765
            pos_hint: {"center_x": 0.5, "center_y": 0.7} #position of text field relative to screen




        Button:
            id: button_saveAudio #unique identifier for this specific image
            size_hint: 0.43,0.1
            pos_hint: {"center_x": 0.74, "y": 0.2}
            on_press:
                root.saveMessage()  #calls the method 'saveMessage' from the parent class in the Python application

        Button:
            id: button_cancelAudio #unique identifier for this specific image
            size_hint: 0.43,0.1
            pos_hint: {"center_x": 0.26, "y": 0.2}
            on_press:
                root.manager.current = "MessageResponses_add" # switches to 'MessageResponses_add' screen
                root.manager.current_screen.__init__()

        Button:
            id: button_backward #unique identifier for this specific button
            pos_hint: {"center_x": 0.15, "center_y": 0.07}
            size_hint: 0.2,0.1
            on_press:
                root.manager.current = "MessageResponses_add"
                root.manager.current_screen.__init__()

        Button:
            id: button_homepage #unique identifier for this specific button
            pos_hint: {"center_x": 0.52, "center_y": 0.07}
            size_hint: 0.2,0.1
            on_press: root.manager.current = "Homepage"

        Button:
            id: button_deleteMessage #unique identifier for this specific button
            pos_hint: {"center_x": 0.85, "center_y": 0.07}
            size_hint: 0.2,0.1
            on_press:
                root.deleteMessage() #calls the method 'deleteMessage' from the parent class in the Python application
                root.manager.current = "MessageResponses_add"
                root.manager.current_screen.__init__()

        Label:
            id: snackbar #unique identifier for this specific label
            canvas.before:
            #draws GUI - the 'before' aspect of the instruction ensures that these graphics are the first aspect of the label to be created and so are behind the text of the label
                Color:
                    rgba: (136/255,122/255,239/255,1)
                Rectangle:
                    pos: self.pos
                    size: self.size
            text_color: (1,1,1,1)
            valign: "middle" #align the text vertically in the middle of the label
            halign: "center" #align the text horizontally in the centre of the label
            size_hint: 1, 0.13
            pos_hint: {"center_x": 0.5, "top":0}

<RingAlert>:

    name: "RingAlert"

    FloatLayout:
        Image:
            id: ringAlert_background
            source: "SmartBell_ringAlert_background.zip"
            size: self.size #sets image to same size as screen
            allow_stretch: True #allows image to be stretched so that it fills the screen
            keep_ratio: False #allows image proportions to be altered so that it fills the screen
            anim_delay: 0.3
            anim_loop: 0

        Image:
            id: ringAlert_background
            source: "SmartBell_ringAlert_button.zip"
            pos_hint: {"center_x": 0.502, "center_y": 0.202}
            size_hint: 0.77,0.77
            anim_delay: 0.04
            anim_loop: 0


<VisitorImage>:

    name: "VisitorImage"

    FloatLayout:
        Image:
            id: background #unique identifier for this specific image
            source: "SmartBell_visitorImage.png"
            size: self.size #sets image to same size as screen
            allow_stretch: True #allows image to be stretched so that it fills the screen
            keep_ratio: False #allows image proportions to be altered so that it fills the screen

        FloatLayout:
            id: visitorImage

        Image:
            id: border
            source: "SmartBell_visitorImage-border.png"
            size: self.size
            allow_stretch: True #allows image to be stretched so that it fills the screen
            keep_ratio: False #allows image proportions to be altered so that it fills the screen

        Image:
            id: label
            source: "SmartBell_visitorImage-label.png"
            size: self.size
            allow_stretch: True #allows image to be stretched so that it fills the screen
            keep_ratio: False #allows image proportions to be altered so that it fills the screen

        Image:
            id: loading
            source: "SmartBell_loading.zip"
            anim_delay: 0.075
            anim_loop: 0
            size_hint: 2, 2
            pos_hint: {"center_x":0.5,"center_y": 0.5} #position of image relative to parent screen

        Label:
            id: faceName
            text: "Loading..."
            text_size: self.size # dimensions for text
            font_size: 28 # font size for text
            halign: 'center' # alignment of text
            valign: 'middle'
            pos_hint: {"center_x": 0.83, "center_y": 0.6}
            size_hint: 0.21,0.1
            canvas.before:
                PushMatrix
                Rotate:
                    angle: -70
                    origin: self.center
            canvas.after:
                PopMatrix

        Button:
            id: button_homepage #unique identifier for this specific button
            pos_hint: {"center_x": 0.52, "center_y": 0.07}
            size_hint: 0.2,0.1
            on_press: root.cancelRespond_dialog()

        Button:
            id: button_respond #unique identifier for this specific button
            pos_hint: {"center_x": 0.52, "center_y": 0.2}
            size_hint: 0.4,0.1
            on_press:
                root.manager.transition = NoTransition()
                root.manager.current = "MessageResponses_add"
                root.manager.current_screen.respondAudio_select()



<VisitorLog>:
    name: 'VisitorLog'

    Image:
        id: background
        source: "SmartBell_visitorLog.png"
        size: self.size #sets image to same size as screen
        allow_stretch: True #allows image to be stretched so that it fills the screen
        keep_ratio: False #allows image proportions to be altered so that it fills the screen

    Button:
        id: button_homepage #unique identifier for this specific button
        pos_hint: {"center_x": 0.52, "center_y": 0.07}
        size_hint: 0.2,0.1
        on_press:
            root.manager.current = "Homepage"




<DialogContent>:
    name: "DialogContent"
    orientation: "vertical"
    size_hint_y: None
    height: "40dp"

    MDTextField:
        id: messageName #unique identifier for this specific text field
        size_hint_x: 1
        hint_text: "Name"
        color_mode: 'custom'
        line_color_normal: [202/255,154/255,254/255,1] #color of the line around the text field in its normal state
        line_color_focus: [202/255,154/255,254/255,1] #color of the line around the text field when the user attempts to close the dialog box before entering a name for the audio message












